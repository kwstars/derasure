// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/kwstars/derasure/internal/app"
	"github.com/kwstars/derasure/internal/app/controllers"
	"github.com/kwstars/derasure/internal/app/log"
	"github.com/kwstars/derasure/internal/app/model"
	"github.com/kwstars/derasure/internal/app/services"
	"github.com/kwstars/derasure/pkg/config"
	"github.com/kwstars/derasure/pkg/db"
	"github.com/kwstars/derasure/pkg/transports/http"
)

// Injectors from wire.go:

func CreateApp(confPath string) (*app.App, func(), error) {
	viper, err := config.New(confPath)
	if err != nil {
		return nil, nil, err
	}
	redisOptions, err := db.NewRedisOptions(viper)
	if err != nil {
		return nil, nil, err
	}
	client, cleanup, err := db.New(redisOptions)
	if err != nil {
		return nil, nil, err
	}
	repostiory := &model.Repostiory{
		Redis: client,
	}
	servicesServices := services.Services{
		Repostiory: repostiory,
	}
	controller := &controllers.Controller{
		Service: servicesServices,
	}
	initControllers := controllers.CreateInitControllersFn(controller)
	logOptions, err := log.NewLogOptions(viper)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	logger, cleanup2, err := log.New(logOptions)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	engine := http.NewRouter(initControllers, logger)
	server, err := http.New(engine)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	appApp, err := app.NewApp(server, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return appApp, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var providerSet = wire.NewSet(config.GlobalProviderSet, log.ProviderSet, db.ProviderSet, model.ProviderSet, services.ProviderSet, controllers.ProviderSet, http.ProviderSet, app.ProviderSet)
